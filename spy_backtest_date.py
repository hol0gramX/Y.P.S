import os
import pandas as pd
import yfinance as yf
import pandas_ta as ta
from datetime import datetime, timedelta, time
from zoneinfo import ZoneInfo
import pandas_market_calendars as mcal

# ========== ÂÖ®Â±ÄÈÖçÁΩÆ ==========
SYMBOL = "SPY"
EST = ZoneInfo("America/New_York")
nasdaq = mcal.get_calendar("NASDAQ")

# ========== Êó∂Èó¥Â∑•ÂÖ∑ ==========
def is_market_day(dt):
    sched = nasdaq.schedule(start_date=dt.date(), end_date=dt.date())
    return not sched.empty

# ========== ÊäÄÊúØÊåáÊ†á ==========
def compute_rsi(s, length=14):
    delta = s.diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    rs = up.rolling(length).mean() / down.rolling(length).mean()
    return (100 - 100 / (1 + rs)).fillna(50)

def compute_macd(df):
    macd = ta.macd(df['Close'], fast=5, slow=10, signal=20)
    df['MACD'] = macd['MACD_5_10_20'].fillna(0)
    df['MACDs'] = macd['MACDs_5_10_20'].fillna(0)
    df['MACDh'] = macd['MACDh_5_10_20'].fillna(0)
    return df

def get_ema_trend(df):
    ema = df['EMA20'].tail(5)
    increasing = all(x < y for x, y in zip(ema, ema[1:]))
    decreasing = all(x > y for x, y in zip(ema, ema[1:]))
    if increasing:
        return "up"
    elif decreasing:
        return "down"
    return "sideways"

# ========== Âà§Êñ≠ÈÄªËæë ==========
def determine_strength(row, direction):
    ema_diff_ratio = (row['Close'] - row['EMA20']) / row['EMA20']
    rsi_slope = row.get('RSI_SLOPE', 0)

    if direction == "call":
        if row['RSI'] >= 60 and row['MACDh'] > 0.3 and ema_diff_ratio > 0.002:
            return "Âº∫"
        elif row['RSI'] >= 55 and row['MACDh'] > 0 and ema_diff_ratio > 0:
            return "‰∏≠"
        elif row['RSI'] < 50 or ema_diff_ratio < 0:
            return "Âº±"
        else:
            return "‰∏≠" if rsi_slope > 0.1 else "Âº±"

    elif direction == "put":
        if row['RSI'] <= 40 and row['MACDh'] < -0.3 and ema_diff_ratio < -0.002:
            return "Âº∫"
        elif row['RSI'] <= 45 and row['MACDh'] < 0 and ema_diff_ratio < 0:
            return "‰∏≠"
        elif row['RSI'] > 50 or ema_diff_ratio > 0:
            return "Âº±"
        else:
            return "‰∏≠" if rsi_slope < -0.1 else "Âº±"
    return "‰∏≠"

def check_call_entry(row):
    return row['Close'] > row['EMA20'] and row['RSI'] > 53 and row['MACD'] > 0 and row['MACDh'] > 0 and row['RSI_SLOPE'] > 0.15

def check_put_entry(row):
    return row['Close'] < row['EMA20'] and row['RSI'] < 47 and row['MACD'] < 0 and row['MACDh'] < 0 and row['RSI_SLOPE'] < -0.15

def allow_bottom_rebound_call(row, prev):
    return row['Close'] < row['EMA20'] and row['RSI'] > prev['RSI'] and row['MACDh'] > prev['MACDh'] and row['MACD'] > -0.3

def allow_top_rebound_put(row, prev):
    return row['Close'] > row['EMA20'] and row['RSI'] < prev['RSI'] and row['MACDh'] < prev['MACDh'] and row['MACD'] < 0.3

def check_call_exit(row):
    return row['RSI'] < 50 and row['RSI_SLOPE'] < 0 and (row['MACD'] < 0.05 or row['MACDh'] < 0.05)

def check_put_exit(row):
    return row['RSI'] > 50 and row['RSI_SLOPE'] > 0 and (row['MACD'] > -0.05 or row['MACDh'] > -0.05)

def is_trend_continuation(row, prev, position):
    if position == "call":
        return row['MACDh'] > 0 and row['RSI'] > 45
    elif position == "put":
        return row['MACDh'] < 0 and row['RSI'] < 55
    return False

# ========== Êï∞ÊçÆÊãâÂèñ ==========
def fetch_data(start_date, end_date):
    df = yf.download(
        SYMBOL,
        start=start_date,
        end=end_date + timedelta(days=1),
        interval="1m",
        prepost=True,
        progress=False,
        auto_adjust=True
    )

    if df.empty:
        raise ValueError("Êó†Êï∞ÊçÆ")

    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(0)

    df.index.name = "Datetime"
    if df.index.tz is None:
        df.index = df.index.tz_localize("UTC").tz_convert(EST)
    else:
        df.index = df.index.tz_convert(EST)

    df.dropna(subset=["High", "Low", "Close"], inplace=True)
    df['RSI'] = compute_rsi(df['Close'])
    df['RSI_SLOPE'] = df['RSI'].diff(3)
    df['EMA20'] = ta.ema(df['Close'], length=20)
    df = compute_macd(df)
    df.dropna(subset=["High", "Low", "Close", "RSI", "MACD", "MACDh", "EMA20"], inplace=True)

    return df

# ========== ÂõûÊµã‰∏ªÈÄªËæë ==========
def backtest_main_logic(start_date_str, end_date_str):
    start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
    end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
    print(f"[üîÅ ÂõûÊµãÊó∂Èó¥Âå∫Èó¥] {start_date} ~ {end_date}")

    df = fetch_data(start_date, end_date)
    print(f"‚úÖ Êï∞ÊçÆÊù°Êï∞Ôºö{len(df)}")

    position = "none"
    signals = []

    for i in range(1, len(df)):
        row = df.iloc[i]
        prev = df.iloc[i - 1]
        ts = row.name
        ttime = ts.time()

        if not is_market_day(ts):
            continue

        ema_trend = get_ema_trend(df.iloc[max(0, i - 5):i + 1])

        if position == "call" and check_call_exit(row):
            if is_trend_continuation(row, prev, "call"):
                signals.append(f"[{ts}] ‚è≥ Ë∂ãÂäø‰∏≠ÁªßË±ÅÂÖçÔºåCall ÊåÅ‰ªì‰∏çÂá∫Âú∫ÔºàRSI={row['RSI']:.1f}, MACDh={row['MACDh']:.3f}Ôºâ")
                continue
            strength = determine_strength(row, "call")
            signals.append(f"[{ts}] ‚ö†Ô∏è Call Âá∫Âú∫‰ø°Âè∑Ôºà{strength}Ôºâ")
            position = "none"
            if check_put_entry(row) and ema_trend == "down":
                position = "put"
                strength = determine_strength(row, "put")
                signals.append(f"[{ts}] üîÅ ÂèçÊâã PutÔºöCall Âá∫Âú∫ + Put ÂÖ•Âú∫Ôºà{strength}Ôºâ")
            continue

        if position == "put" and check_put_exit(row):
            if is_trend_continuation(row, prev, "put"):
                signals.append(f"[{ts}] ‚è≥ Ë∂ãÂäø‰∏≠ÁªßË±ÅÂÖçÔºåPut ÊåÅ‰ªì‰∏çÂá∫Âú∫ÔºàRSI={row['RSI']:.1f}, MACDh={row['MACDh']:.3f}Ôºâ")
                continue
            strength = determine_strength(row, "put")
            signals.append(f"[{ts}] ‚ö†Ô∏è Put Âá∫Âú∫‰ø°Âè∑Ôºà{strength}Ôºâ")
            position = "none"
            if check_call_entry(row) and ema_trend == "up":
                position = "call"
                strength = determine_strength(row, "call")
                signals.append(f"[{ts}] üîÅ ÂèçÊâã CallÔºöPut Âá∫Âú∫ + Call ÂÖ•Âú∫Ôºà{strength}Ôºâ")
            continue

        if position == "none":
            if check_call_entry(row) and ema_trend == "up":
                strength = determine_strength(row, "call")
                signals.append(f"[{ts}] üìà ‰∏ªÂçáÊµ™ Call ÂÖ•Âú∫Ôºà{strength}Ôºâ")
                position = "call"
            elif check_put_entry(row) and ema_trend == "down":
                strength = determine_strength(row, "put")
                signals.append(f"[{ts}] üìâ ‰∏ªË∑åÊµ™ Put ÂÖ•Âú∫Ôºà{strength}Ôºâ")
                position = "put"
            elif allow_bottom_rebound_call(row, prev) and ema_trend == "up":
                strength = determine_strength(row, "call")
                signals.append(f"[{ts}] üìà Â∫ïÈÉ®ÂèçÂºπ Call ÊçïÊçâÔºà{strength}Ôºâ")
                position = "call"
            elif allow_top_rebound_put(row, prev) and ema_trend == "down":
                strength = determine_strength(row, "put")
                signals.append(f"[{ts}] üìâ È°∂ÈÉ®ÂèçËΩ¨ Put ÊçïÊçâÔºà{strength}Ôºâ")
                position = "put"

    print(f"üìä ÊÄª‰ø°Âè∑Êï∞Ôºö{len(signals)}")
    for sig in signals:
        print(sig)

# ========== ÂêØÂä® ==========
if __name__ == "__main__":
    backtest_main_logic("2025-06-20", "2025-06-27")
